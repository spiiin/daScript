MACRO(SOURCE_GROUP_FILES _groupName _fileNames )
	STRING(REGEX REPLACE "/" "\\\\" _groupNameP ${_groupName} )
	SOURCE_GROUP( ${_groupNameP} FILES ${${_fileNames}} )
	SET_SOURCE_FILES_PROPERTIES( ${${_fileNames}} PROPERTIES "MY_GROUP_NAME" ${_groupNameP} )
ENDMACRO(SOURCE_GROUP_FILES)

MACRO(SETUP_LTO _targetName)
    IF(APPLE)
        IF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
            # set_property(TARGET ${_targetName} PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
        ELSE()
            set_property(TARGET ${_targetName} PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
        ENDIF()
    ELSEIF(UNIX)
        IF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
            set_property(TARGET ${_targetName} PROPERTY INTERPROCEDURAL_OPTIMIZATION TRUE)
        ENDIF()
    ENDIF()
ENDMACRO()

MACRO(SETUP_COMPILER)
	IF(APPLE)
		ADD_DEFINITIONS(-DITS_PLATFORM_APPLE=1)
		ADD_DEFINITIONS(-Wall -Wextra -pedantic)
		# UNCOMMENT FOR ASAN
		# ADD_DEFINITIONS("-fsanitize=address")
		# ADD_DEFINITIONS("-fsanitize=thread")
		# SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -fsanitize=thread")
        IF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
			ADD_COMPILE_OPTIONS(-Wno-pedantic)
			ADD_COMPILE_OPTIONS(-Wno-ignored-attributes)
			ADD_COMPILE_OPTIONS(-Wno-unused-but-set-variable)
			ADD_COMPILE_OPTIONS(-Wno-unused-parameter)
			ADD_COMPILE_OPTIONS(-Wno-strict-aliasing)
			ADD_COMPILE_OPTIONS(-Wno-extra)
			ADD_COMPILE_OPTIONS(-Wno-unused-value)
			ADD_COMPILE_OPTIONS(-Wno-unused-variable)
			ADD_COMPILE_OPTIONS(-Wno-class-memaccess)
			ADD_COMPILE_OPTIONS(-Wno-invalid-offsetof)
		    SET(CMAKE_CXX_FLAGS_RELEASE "-O3 -fno-rtti -fno-exceptions -fomit-frame-pointer -fno-stack-protector -s -DDAS_FUSION=2 -DDAS_DEBUGGER=0 -DNDEBUG=1")
			SET(CMAKE_CXX_FLAGS_MINSIZEREL "-Os -fno-rtti -fno-exceptions -fomit-frame-pointer -fno-stack-protector -s -DDAS_FUSION=1 -DDAS_DEBUGGER=0 -DNDEBUG=1")
		    SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -fno-rtti -fno-exceptions -fno-stack-protector -DDAS_FUSION=1 -DNDEBUG=1")
        ELSE()
			ADD_COMPILE_OPTIONS(-Wno-c99-extensions)
			ADD_COMPILE_OPTIONS(-Wno-unused-variable)
			ADD_COMPILE_OPTIONS(-Wno-deprecated-declarations)
			ADD_COMPILE_OPTIONS(-Wno-missing-field-initializers)
            SET(CMAKE_CXX_FLAGS_RELEASE "-O3 -fno-rtti -fno-exceptions -fomit-frame-pointer -fno-stack-protector -DDAS_FUSION=2 -DDAS_DEBUGGER=0 -DNDEBUG=1")
			SET(CMAKE_CXX_FLAGS_MINSIZEREL "-Os -fno-rtti -fno-exceptions -fomit-frame-pointer -fno-stack-protector -DDAS_FUSION=1 -DDAS_DEBUGGER=0 -DNDEBUG=1")
            SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -fno-rtti -fno-exceptions -fno-stack-protector -DDAS_FUSION=1 -DNDEBUG=1")
			SET(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} -s")
			SET(CMAKE_EXE_LINKER_FLAGS_MINSIZEREL "${CMAKE_EXE_LINKER_FLAGS_MINSIZEREL} -s")
        ENDIF()
    ELSEIF(UNIX)
        ADD_COMPILE_OPTIONS(-Wno-ignored-attributes)
		set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-invalid-offsetof")
		SET(CMAKE_CXX_FLAGS_RELEASE "-O3 -fno-rtti -fno-exceptions -fomit-frame-pointer -fno-stack-protector -s -DDAS_FUSION=2 -DDAS_DEBUGGER=0 -DNDEBUG=1")
		SET(CMAKE_CXX_FLAGS_MINSIZEREL "-Os -fno-rtti -fno-exceptions -fomit-frame-pointer -fno-stack-protector -s -DDAS_FUSION=1 -DDAS_DEBUGGER=0 -DNDEBUG=1")
		SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -fno-rtti -fno-exceptions -fno-stack-protector -DDAS_FUSION=1 -DNDEBUG=1")
	ELSEIF(WIN32)
		IF("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
			SET(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -v")
			ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)
			ADD_COMPILE_OPTIONS(-msse2)
			ADD_COMPILE_OPTIONS(-Wno-unused-parameter)
			ADD_COMPILE_OPTIONS(-Wno-ignored-attributes)
			ADD_COMPILE_OPTIONS(-Wno-deprecated-declarations)
			ADD_COMPILE_OPTIONS(-Wno-implicit-exception-spec-mismatch)
			ADD_COMPILE_OPTIONS(-Wno-missing-field-initializers)
			ADD_COMPILE_OPTIONS(-Wno-tautological-constant-compare)
			ADD_COMPILE_OPTIONS(-Wno-microsoft-cast)
			set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-invalid-offsetof")
			SET(CMAKE_CXX_FLAGS_RELEASE "-Ox -DDAS_FUSION=2 -DDAS_DEBUGGER=0 -DNDEBUG=1")
			SET(CMAKE_CXX_FLAGS_MINSIZEREL "-Os -DDAS_FUSION=1 -DDAS_DEBUGGER=0 -DNDEBUG=1")
			SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O2 -DDAS_FUSION=1 -DNDEBUG=1")
			SET(CMAKE_CXX_LINK_EXECUTABLE "<CMAKE_CXX_COMPILER> -fuse-ld=lld-link -nostartfiles -nostdlib <FLAGS> <CMAKE_CXX_LINK_FLAGS> <LINK_FLAGS> <OBJECTS> -o <TARGET> -Xlinker /pdb:<TARGET_PDB> -Xlinker /version:<TARGET_VERSION_MAJOR>.<TARGET_VERSION_MINOR>  <LINK_LIBRARIES> <MANIFESTS>")
		ELSE()
			ADD_COMPILE_OPTIONS(-bigobj)
			ADD_DEFINITIONS(-DITS_PLATFORM_WIN32=1)
			ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)
			# setup parallel build
			cmake_host_system_information(RESULT Ncpu QUERY NUMBER_OF_LOGICAL_CORES)
			message("PARALLEL BUILD ON ${Ncpu} CORES" )
			set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /MP${Ncpu}")
			# end setup
			string(REPLACE "/W3" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
			string(REPLACE "/EHsc" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
			string(REPLACE "INCREMENTAL:YES" "INCREMENTAL:NO" CMAKE_EXE_LINKER_FLAGS_DEBUG ${CMAKE_EXE_LINKER_FLAGS_DEBUG})
			string(REPLACE "INCREMENTAL:YES" "INCREMENTAL:NO" CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO ${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO})
			ADD_DEFINITIONS("/W4")
			# UNCOMMENT THIS FOR ASASN
			# ADD_DEFINITIONS("/fsanitize=address")
			IF("${CMAKE_SIZEOF_VOID_P}" STREQUAL "4")
				ADD_DEFINITIONS("-DDAS_ENABLE_FPE")
				ADD_DEFINITIONS("/arch:IA32")
				ADD_DEFINITIONS("-D_TARGET_SIMD_SSE=2")
			ENDIF()

			IF(MSVC)
				ADD_COMPILE_OPTIONS(
					$<$<CONFIG:>:/MT>
					$<$<CONFIG:Debug>:/MTd>
					$<$<CONFIG:Release>:/MT>
				)
			ENDIF()

			SET(CMAKE_CXX_FLAGS_DEBUG "/MTd /Od /DDAS_FUSION=1 /DDAS_DEBUGGER=1 /Zi /EHa")
			SET(CMAKE_CXX_FLAGS_RELEASE "/Ot /Ox /Oi /DNDEBUG=1 /DDAS_FUSION=2 /DDAS_DEBUGGER=1 /Gy /GS- /GR- /EHa")
			SET(CMAKE_CXX_FLAGS_MINSIZEREL "/Os /Oi /DNDEBUG=1 /DDAS_FUSION=1 /DDAS_DEBUGGER=1 /Gy /GS- /GR- /EHa")
			SET(CMAKE_CXX_FLAGS_RELWITHDEBINFO "/Zi /Ot /Oi /DNDEBUG=1 /DDAS_FUSION=1 /Gy /GS- /GR- /EHa")

		ENDIF()
	ENDIF()
    ADD_DEFINITIONS(-DSIZE_OF_VOID_P=${CMAKE_SIZEOF_VOID_P})
ENDMACRO()

MACRO(SETUP_CPP11 _targetName)
	IF(APPLE)
		SET_TARGET_PROPERTIES(${_targetName} PROPERTIES XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD "c++17")
		SET_TARGET_PROPERTIES(${_targetName} PROPERTIES XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY "libc++")
		SET_TARGET_PROPERTIES(${_targetName} PROPERTIES XCODE_ATTRIBUTE_ARCHS "$(ARCHS_STANDARD_64_BIT)")
		SET_TARGET_PROPERTIES(${_targetName} PROPERTIES XCODE_ATTRIBUTE_ONLY_ACTIVE_ARCH "YES")
        SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-register -std=c++1z")
	ENDIF()
	IF ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "GNU")
        #SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -m64 -std=c++1z -stdlib=libc++")
	ENDIF()
ENDMACRO()

MACRO(CMAKE_TEXT_XXD project_name file_name)
	add_custom_command(
		DEPENDS ${file_name}
		OUTPUT ${file_name}.inc
		VERBATIM
		WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
  		COMMAND ${CMAKE_COMMAND} -DFILE_TYPE:STRING="TEXT" -DINPUT_FILE_NAME:STRING=${file_name}
			-P CMakeXxdImpl.txt
	)

	list(APPEND XXD_DEPENDS_LIST_${project_name} ${file_name}.inc)
 	execute_process(
		WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
		COMMAND ${CMAKE_COMMAND} -DFILE_TYPE:STRING="TEXT" -DINPUT_FILE_NAME:STRING=${file_name}
			-P CMakeXxdImpl.txt
	)
ENDMACRO()

MACRO(ADD_PROJECT_XXD_DEPENDS project_name)
	ADD_CUSTOM_TARGET(${project_name}_xxd ALL
		DEPENDS ${XXD_DEPENDS_LIST_${project_name}}
		WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
	)
	ADD_DEPENDENCIES(${project_name} ${project_name}_xxd)
ENDMACRO()


MACRO(FIND_FLEX_AND_BISON)
	find_package(BISON)
	find_package(FLEX)
ENDMACRO(FIND_FLEX_AND_BISON)


MACRO(FLEX input)
	IF(NOT FLEX_FOUND)
		MESSAGE(STATUS "FLEX not found, pre-generated files will be used." )
	ELSE()
		get_filename_component(input_src ${input} ABSOLUTE)
		get_filename_component(input_dir ${input_src} DIRECTORY)
		get_filename_component(input_name ${input} NAME_WE)
		get_filename_component(input_name_ext ${input} NAME)
		ADD_CUSTOM_COMMAND(
			DEPENDS ${input_src}
			OUTPUT ${input_dir}/${input_name}.cpp
			WORKING_DIRECTORY ${input_dir}
			COMMAND ${FLEX_EXECUTABLE} --outfile=${input_name}.cpp ${input_name_ext}
			COMMENT "flex (v ${FLEX_VERSION}) ${input} to ${input_dir}/${input_name}.cpp")
	ENDIF()
ENDMACRO()

MACRO(BISON input)
	IF(NOT BISON_FOUND)
		MESSAGE(STATUS "BISON not found, pre-generated files will be used." )
	ELSE()
		get_filename_component(input_src ${input} ABSOLUTE)
		get_filename_component(input_dir ${input_src} DIRECTORY)
		get_filename_component(input_name ${input} NAME_WE)
		get_filename_component(input_name_ext ${input} NAME)
		ADD_CUSTOM_COMMAND(
			DEPENDS ${input_src}
			OUTPUT ${input_dir}/${input_name}.cpp ${input_dir}/${input_name}.hpp ${input_dir}/${input_name}.output
			WORKING_DIRECTORY ${input_dir}
			COMMAND ${BISON_EXECUTABLE} --output=${input_name}.cpp --defines=${input_name}.hpp ${input_name_ext}
			COMMENT "bison (v ${BISON_VERSION}) ${input} to ${input_dir}/${input_name}.cpp + ${input_dir}/${input_name}.hpp + ${input_dir}/${input_name}.output")
	ENDIF()
ENDMACRO()
